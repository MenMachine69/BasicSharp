using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace GraphicsConsole
{
    /// <summary>
    /// Character Table (Font)
    /// </summary>
    [Serializable]
    public class CharTable
    {
        /// <summary>
        /// Array of Characters (ASCII 32 - ASCII 255)
        /// </summary>
        public CharDef[] Characters { get; set; } = new CharDef[224];

        /// <summary>
        /// Constructor
        /// </summary>
        public CharTable()
        {
            // init the Character table with spaces
            for (int i = 0; i < Characters.Length; i++)
            {
                Characters[i] = new CharDef();
            }

            Characters[0] = new CharDef { Character = ' ', SymbolCode = "SPACE", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[1] = new CharDef { Character = '!', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x0, 0x0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0 } };
            Characters[2] = new CharDef { Character = '"', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x0 } };
            Characters[3] = new CharDef { Character = '#', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x66, 0x66, 0xff, 0xff, 0x66, 0x66, 0xff, 0xff, 0x66, 0x66, 0x0, 0x0, 0x0 } };
            Characters[4] = new CharDef { Character = '$', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0xf8, 0xfc, 0xc, 0x7c, 0xf8, 0xc0, 0xfc, 0x7c, 0x30, 0x30, 0x0 } };
            Characters[5] = new CharDef { Character = '%', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0x6c, 0x60, 0x30, 0x30, 0x18, 0xd8, 0xcc, 0xcc, 0x0, 0x0 } };
            Characters[6] = new CharDef { Character = '&', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x76, 0xfe, 0xcc, 0xcc, 0xde, 0xde, 0x70, 0x70, 0xd8, 0xd8, 0xf8, 0x70, 0x0 } };
            Characters[7] = new CharDef { Character = '\'', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x60, 0x30, 0x30, 0x30, 0x0 } };
            Characters[8] = new CharDef { Character = '(', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x18, 0x30, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x30, 0x18, 0x0 } };
            Characters[9] = new CharDef { Character = ')', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x60, 0x30, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x30, 0x60, 0x0 } };
            Characters[10] = new CharDef { Character = '*', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x54, 0x38, 0xfe, 0x38, 0x54, 0x92, 0x0, 0x0, 0x0, 0x0 } };
            Characters[11] = new CharDef { Character = '+', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[12] = new CharDef { Character = ',', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x18, 0x1c, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[13] = new CharDef { Character = '-', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[14] = new CharDef { Character = '.', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[15] = new CharDef { Character = '/', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xc, 0xc, 0x6, 0x6, 0x3, 0x3, 0x0, 0x0 } };
            Characters[16] = new CharDef { Character = '0', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xec, 0xdc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[17] = new CharDef { Character = '1', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x70, 0x70, 0x30, 0x30, 0x0 } };
            Characters[18] = new CharDef { Character = '2', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x60, 0x60, 0x30, 0x30, 0x18, 0x1c, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[19] = new CharDef { Character = '3', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0x18, 0x18, 0x30, 0x30, 0x18, 0x18, 0xfc, 0xfc, 0x0 } };
            Characters[20] = new CharDef { Character = '4', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc, 0xc, 0xfe, 0xfe, 0x6c, 0x6c, 0x3c, 0x3c, 0x1c, 0x1c, 0xc, 0xc, 0x0 } };
            Characters[21] = new CharDef { Character = '5', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xc, 0xc, 0xc, 0xfc, 0xf8, 0xc0, 0xc0, 0xfc, 0xfc, 0x0 } };
            Characters[22] = new CharDef { Character = '6', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0xc0, 0xc0, 0xe0, 0x78, 0x38, 0x0 } };
            Characters[23] = new CharDef { Character = '7', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xc, 0xc, 0xfc, 0xfc, 0x0 } };
            Characters[24] = new CharDef { Character = '8', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0xf8, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[25] = new CharDef { Character = '9', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xc, 0xc, 0xc, 0x7c, 0xfc, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[26] = new CharDef { Character = ':', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x30, 0x30, 0x30, 0x0, 0x0, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0 } };
            Characters[27] = new CharDef { Character = ';', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x40, 0x60, 0x30, 0x30, 0x30, 0x0, 0x0, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0 } };
            Characters[28] = new CharDef { Character = '<', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0x30, 0x60, 0xc0, 0xc0, 0x60, 0x30, 0x18, 0xc, 0x0, 0x0 } };
            Characters[29] = new CharDef { Character = '=', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x0, 0x0, 0xfc, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[30] = new CharDef { Character = '>', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0xc0, 0x60, 0x30, 0x18, 0xc, 0xc, 0x18, 0x30, 0x60, 0xc0, 0x0, 0x0 } };
            Characters[31] = new CharDef { Character = '?', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x0, 0x30, 0x30, 0x30, 0x18, 0x18, 0xcc, 0xcc, 0x7c, 0x78, 0x0 } };
            Characters[32] = new CharDef { Character = '@', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x3c, 0x7e, 0xe2, 0xc0, 0xdc, 0xd6, 0xd6, 0xda, 0xc2, 0x66, 0x7c, 0x38, 0x0 } };
            Characters[33] = new CharDef { Character = 'A', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x30, 0x0 } };
            Characters[34] = new CharDef { Character = 'B', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0 } };
            Characters[35] = new CharDef { Character = 'C', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[36] = new CharDef { Character = 'D', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0 } };
            Characters[37] = new CharDef { Character = 'E', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xf8, 0xf8, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0x0 } };
            Characters[38] = new CharDef { Character = 'F', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf8, 0xf8, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0x0 } };
            Characters[39] = new CharDef { Character = 'G', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xdc, 0xdc, 0xc0, 0xc0, 0xc0, 0xfc, 0x7c, 0x0 } };
            Characters[40] = new CharDef { Character = 'H', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[41] = new CharDef { Character = 'I', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x0 } };
            Characters[42] = new CharDef { Character = 'J', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x0 } };
            Characters[43] = new CharDef { Character = 'K', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xc6, 0xcc, 0xcc, 0xd8, 0xd8, 0xf0, 0xf0, 0xd8, 0xd8, 0xcc, 0xcc, 0x0 } };
            Characters[44] = new CharDef { Character = 'L', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x0 } };
            Characters[45] = new CharDef { Character = 'M', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0xfe, 0xee, 0xc6, 0xc6, 0x0 } };
            Characters[46] = new CharDef { Character = 'N', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xdc, 0xdc, 0xfc, 0xfc, 0xec, 0xec, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[47] = new CharDef { Character = 'O', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[48] = new CharDef { Character = 'P', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0 } };
            Characters[49] = new CharDef { Character = 'Q', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x6c, 0xf8, 0xd4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[50] = new CharDef { Character = 'R', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xc6, 0xcc, 0xcc, 0xd8, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0 } };
            Characters[51] = new CharDef { Character = 'S', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xc, 0xc, 0x1c, 0x38, 0x70, 0xe0, 0xc0, 0xc0, 0xfc, 0x7c, 0x0 } };
            Characters[52] = new CharDef { Character = 'T', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x0 } };
            Characters[53] = new CharDef { Character = 'U', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[54] = new CharDef { Character = 'V', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x78, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[55] = new CharDef { Character = 'W', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x82, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x0 } };
            Characters[56] = new CharDef { Character = 'X', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x78, 0x78, 0x30, 0x30, 0x78, 0x78, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[57] = new CharDef { Character = 'Y', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x0 } };
            Characters[58] = new CharDef { Character = 'Z', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0xc0, 0xc0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xfc, 0xfc, 0x0 } };
            Characters[59] = new CharDef { Character = '[', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x3c, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x3c, 0x0 } };
            Characters[60] = new CharDef { Character = '\\', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0xc, 0xc, 0xc, 0xc, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0xc0, 0xc0, 0xc0, 0x0 } };
            Characters[61] = new CharDef { Character = ']', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x3c, 0x3c, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0x3c, 0x3c, 0x0 } };
            Characters[62] = new CharDef { Character = '^', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6, 0x6c, 0x38, 0x10, 0x0 } };
            Characters[63] = new CharDef { Character = '_', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xfe, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[64] = new CharDef { Character = '`', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x30, 0x60, 0x60, 0x60, 0x0 } };
            Characters[65] = new CharDef { Character = 'a', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xcc, 0xcc, 0xfc, 0x7c, 0xc, 0x7c, 0x78, 0x0, 0x0, 0x0, 0x0 } };
            Characters[66] = new CharDef { Character = 'b', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0xc0, 0xc0, 0xc0, 0x0 } };
            Characters[67] = new CharDef { Character = 'c', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf8, 0x78, 0x0, 0x0, 0x0, 0x0 } };
            Characters[68] = new CharDef { Character = 'd', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xfc, 0x7c, 0xc, 0xc, 0xc, 0xc, 0xc, 0x0 } };
            Characters[69] = new CharDef { Character = 'e', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xc0, 0xc0, 0xfc, 0xcc, 0xcc, 0xfc, 0x78, 0x0, 0x0, 0x0, 0x0 } };
            Characters[70] = new CharDef { Character = 'f', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x3c, 0x1c, 0x0 } };
            Characters[71] = new CharDef { Character = 'g', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xf8, 0xfc, 0xc, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x7c, 0x0, 0x0, 0x0, 0x0 } };
            Characters[72] = new CharDef { Character = 'h', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0xc0, 0xc0, 0xc0, 0x0 } };
            Characters[73] = new CharDef { Character = 'i', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x70, 0x70, 0x0, 0x30, 0x30, 0x0 } };
            Characters[74] = new CharDef { Character = 'j', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xe0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0, 0x30, 0x30, 0x0 } };
            Characters[75] = new CharDef { Character = 'k', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xc6, 0xce, 0xdc, 0xd8, 0xf0, 0xf0, 0xd8, 0xdc, 0xcc, 0xc0, 0xc0, 0x0 } };
            Characters[76] = new CharDef { Character = 'l', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0x0 } };
            Characters[77] = new CharDef { Character = 'm', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xfe, 0xec, 0x0, 0x0, 0x0, 0x0 } };
            Characters[78] = new CharDef { Character = 'n', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0, 0x0, 0x0, 0x0 } };
            Characters[79] = new CharDef { Character = 'o', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0, 0x0, 0x0, 0x0 } };
            Characters[80] = new CharDef { Character = 'p', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xc0, 0xc0, 0xf8, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xf8, 0x0, 0x0, 0x0, 0x0 } };
            Characters[81] = new CharDef { Character = 'q', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xc, 0xc, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x7c, 0x0, 0x0, 0x0, 0x0 } };
            Characters[82] = new CharDef { Character = 'r', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xfc, 0xf8, 0x0, 0x0, 0x0, 0x0 } };
            Characters[83] = new CharDef { Character = 's', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xc, 0x1c, 0x78, 0xe0, 0xc0, 0xfc, 0x7c, 0x0, 0x0, 0x0, 0x0 } };
            Characters[84] = new CharDef { Character = 't', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x1c, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0xfc, 0x30, 0x30, 0x30, 0x0 } };
            Characters[85] = new CharDef { Character = 'u', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0, 0x0, 0x0, 0x0 } };
            Characters[86] = new CharDef { Character = 'v', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x30, 0x30, 0x78, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0, 0x0, 0x0, 0x0 } };
            Characters[87] = new CharDef { Character = 'w', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xd6, 0xc6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0 } };
            Characters[88] = new CharDef { Character = 'x', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0x78, 0x78, 0x30, 0x78, 0x78, 0xcc, 0xcc, 0x0, 0x0, 0x0, 0x0 } };
            Characters[89] = new CharDef { Character = 'y', SymbolCode = "", CharBytes = new byte[] { 0x0, 0xf8, 0xfc, 0xc, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0, 0x0, 0x0, 0x0 } };
            Characters[90] = new CharDef { Character = 'z', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xfc, 0xfc, 0x60, 0x60, 0x30, 0x30, 0x18, 0xfc, 0xfc, 0x0, 0x0, 0x0, 0x0 } };
            Characters[91] = new CharDef { Character = '{', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x1c, 0x30, 0x30, 0x30, 0x70, 0xe0, 0x70, 0x30, 0x30, 0x30, 0x1c, 0x0, 0x0 } };
            Characters[92] = new CharDef { Character = '|', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0 } };
            Characters[93] = new CharDef { Character = '}', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xe0, 0x30, 0x30, 0x30, 0x38, 0x1c, 0x38, 0x30, 0x30, 0x30, 0xe0, 0x0, 0x0 } };
            Characters[94] = new CharDef { Character = '~', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xbc, 0xe4, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[95] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[96] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[97] = new CharDef { Character = 'ü', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0, 0xcc, 0xcc, 0x0 } };
            Characters[98] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[99] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[100] = new CharDef { Character = 'ä', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x7c, 0xfc, 0xcc, 0xcc, 0xfc, 0x7c, 0xc, 0x7c, 0x78, 0x0, 0xcc, 0xcc, 0x0 } };
            Characters[101] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[102] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[103] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[104] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[105] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[106] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[107] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[108] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[109] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[110] = new CharDef { Character = 'Ä', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xcc, 0xcc, 0xfc, 0x78, 0x30, 0xcc, 0xcc } };
            Characters[111] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[112] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[113] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[114] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[115] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[116] = new CharDef { Character = 'ö', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0, 0xcc, 0xcc, 0x0 } };
            Characters[117] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[118] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[119] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[120] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[121] = new CharDef { Character = 'Ö', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0xcc, 0xcc } };
            Characters[122] = new CharDef { Character = 'Ü', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x78, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x0, 0xcc, 0xcc } };
            Characters[123] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[124] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[125] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[126] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf } };
            Characters[127] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 } };
            Characters[128] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0 } };
            Characters[129] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc } };
            Characters[130] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f } };
            Characters[131] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3 } };
            Characters[132] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff } };
            Characters[133] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff } };
            Characters[134] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[135] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[136] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[137] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[138] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0 } };
            Characters[139] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0 } };
            Characters[140] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[141] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[142] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[143] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[144] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x55, 0x0, 0x55, 0x0, 0x55, 0x0, 0x55, 0x0, 0x55, 0x0, 0x55, 0x0, 0x55, 0x0, 0x55 } };
            Characters[145] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa } };
            Characters[146] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa, 0xff, 0xaa } };
            Characters[147] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 } };
            Characters[148] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[149] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 } };
            Characters[150] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[151] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 } };
            Characters[152] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[153] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[154] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 } };
            Characters[155] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 } };
            Characters[156] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x8, 0x8, 0x4, 0x4, 0x2, 0x2, 0x1, 0x1 } };
            Characters[157] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x1, 0x1, 0x2, 0x2, 0x4, 0x4, 0x8, 0x8, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80 } };
            Characters[158] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[159] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1 } };
            Characters[160] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80 } };
            Characters[161] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[162] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0xf, 0xf, 0x7, 0x7, 0x3, 0x3, 0x1, 0x1 } };
            Characters[163] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80 } };
            Characters[164] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff } };
            Characters[165] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x1, 0x1, 0x3, 0x3, 0x7, 0x7, 0xf, 0xf, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff } };
            Characters[166] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0x7f, 0x3f, 0x1f, 0xf, 0x7, 0x3, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[167] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[168] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[169] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[170] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80 } };
            Characters[171] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff } };
            Characters[172] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x7f, 0x3f, 0x1f, 0xf, 0x7, 0x3, 0x1 } };
            Characters[173] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff } };
            Characters[174] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x3, 0xc, 0x10, 0x20, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x20, 0x10, 0xc, 0x3 } };
            Characters[175] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xc0, 0x30, 0x8, 0x4, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x8, 0x30, 0xc0 } };
            Characters[176] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x10, 0x20, 0x40, 0x40, 0x80, 0x80 } };
            Characters[177] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x30, 0x8, 0x4, 0x2, 0x2, 0x1, 0x1 } };
            Characters[178] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x80, 0x80, 0x40, 0x40, 0x20, 0x10, 0xc, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[179] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x1, 0x1, 0x2, 0x2, 0x4, 0x8, 0x30, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[180] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[181] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81 } };
            Characters[182] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x81, 0x81, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x18, 0x18, 0x24, 0x24, 0x42, 0x42, 0x81, 0x81 } };
            Characters[183] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[184] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[185] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 } };
            Characters[186] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf } };
            Characters[187] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[188] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[189] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 } };
            Characters[190] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf } };
            Characters[191] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
            Characters[192] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 } };
            Characters[193] = new CharDef { Character = 'ß', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0xc0, 0xd8, 0xdc, 0xcc, 0xcc, 0xcc, 0xd8, 0xdc, 0xcc, 0xcc, 0xcc, 0xfc, 0x78, 0x0 } };
            Characters[194] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf } };
            Characters[195] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa } };
            Characters[196] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0 } };
            Characters[197] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x0, 0x0, 0x0, 0x0 } };
            Characters[198] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x3, 0xf, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0xf, 0x3 } };
            Characters[199] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xc0 } };
            Characters[200] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff } };
            Characters[201] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff } };
            Characters[202] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0xf, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[203] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[204] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[205] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[206] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[207] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[208] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[209] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[210] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[211] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[212] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[213] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[214] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[215] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[216] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[217] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[218] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[219] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[220] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[221] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
            Characters[222] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x0, 0x0, 0x0, 0x0 } };
            Characters[223] = new CharDef { Character = ' ', SymbolCode = "", CharBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };

        }

        /// <summary>
        /// get a character definition by its character /character that stands for)
        /// </summary>
        /// <param name="c">character</param>
        /// <returns>character definition - fallback is SPACE (ASCCI(32))</returns>
        public CharDef GetChar(char c)
        {
            CharDef ret = Characters.FirstOrDefault(ch => ch.Character == c);

            if (ret == null)
                ret = Characters[0];

            return ret;
        }

        /// <summary>
        /// Liefert den Code des Zeichens
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        public Byte GetCharCode(char c)
        {
            return (byte)(32 + Array.IndexOf(Characters, GetChar(c)));
        }
        /// <summary>
        /// Get a character by its ascii code
        /// </summary>
        /// <param name="code">ascii code (32 - 255)</param>
        /// <returns>character definition - fallback is SPACE (ASCCI(32))</returns>
        public CharDef GetAsciiChar(byte code)
        {
            if (code >= 32 && code <= 255)
                return Characters[code - 32];

            return Characters[0];
        }

        /// <summary>
        /// Get a character by its position in character table
        /// </summary>
        /// <param name="code">position in table (0 - 224)</param>
        /// <returns>character definition - fallback is SPACE (ASCCI(32))</returns>
        public CharDef GetChar(byte code)
        {
            if (code >= 0 && code <= 224)
                return Characters[code];

            return Characters[0];
        }

        /// <summary>
        /// Get a character by ist symbolic name
        /// </summary>
        /// <param name="name">symbolic name</param>
        /// <returns>character definition - fallback is SPACE (ASCCI(32))</returns>
        public CharDef GetChar(string name)
        {
            CharDef ret = Characters.FirstOrDefault(ch => ch.SymbolCode.ToUpper() == name.ToUpper());

            if (ret == null)
                ret = Characters[0];

            return ret;
        }

        /// <summary>
        /// Load a Character table from file
        /// </summary>
        /// <param name="filename">filename</param>
        /// <param name="message">message with informations about the success</param>
        /// <returns>loaded CharTable objekt or null if errors occured</returns>
        public static CharTable LoadFromFile(string filename, out string message)
        {
            CharTable ret = null;
            message = "";

            if (!File.Exists(filename))
                message = "File doesn't exist.";
            else
            {
                try
                {
                    ret = extensions.FromByteArray<CharTable>(File.ReadAllBytes(filename));
                }
                catch (Exception ex)
                {
                    message = "Error while loading from file. " + ex.Message;
                    ret = null;
                }
            }

            return ret;
        }

        /// <summary>
        /// Save a Character Table to file
        /// </summary>
        /// <param name="font">CharTable to save</param>
        /// <param name="filename">filename to save the font in it</param>
        /// <param name="allowoverwrite">allow overwrite existing file</param>
        /// <param name="message">message with informations about the success</param>
        /// <returns>true if successfully saved, else false (see message about information why)</returns>
        public static bool SaveToFile(CharTable font, string filename, bool allowoverwrite, out string message)
        {
            bool ret = true;
            message = "";

            if (File.Exists(filename))
            {
                if (allowoverwrite == false)
                {
                    message = "Can't save because file allways exist.";
                    ret = false;
                }
            }

            if (ret)
            {
                try
                {
                    File.WriteAllBytes(filename, font.ToByteArray());
                }
                catch (Exception ex)
                {
                    message = "Error while saving to file. " + ex.Message;
                    ret = false;
                }
            }

            return ret;
        }
    }

    /// <summary>
    /// Single character definition
    /// </summary>
    [Serializable]
    public class CharDef
    {
        /// <summary>
        /// Single character - one Byte per Row (13 rows)
        /// </summary>
        public byte[] CharBytes { get; set; } = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        /// <summary>
        /// Character that is represented by this definition (a-z, A-Z, 0-9) e.g.)
        /// </summary>
        public char Character { get; set; } = ' ';

        /// <summary>
        /// Name of this char. The name can be used for non printabel chars e.g. 
        /// to get accces to this char instead of using the 'Character'
        /// </summary>
        public string SymbolCode { get; set; } = "SPACE";

        /// <summary>
        /// Check if bit is set
        /// </summary>
        /// <param name="row">row (1-13)</param>
        /// <param name="col">col (1-8)</param>
        /// <returns></returns>
        public bool GetBit(int row, int col)
        {
            return CharBytes[16 - row].HasBit(8 - col);
        }

        /// <summary>
        /// Check if bit is set
        /// </summary>
        /// <param name="row">row (1-13)</param>
        /// <param name="col">col (1-8)</param>
        /// <returns></returns>
        public void SetBit(int row, int col, bool on)
        {
            if (on)
                CharBytes[16 - row] = CharBytes[16 - row].SetBit(8 - col);
            else
                CharBytes[16 - row] = CharBytes[16 - row].RemoveBit(8 - col);
        }

        /// <summary>
        /// Draw the character to a canvas
        /// </summary>
        /// <param name="brush">brush to draw with</param>
        /// <param name="g">canvas to draw on</param>
        /// <param name="pt">Pint of left upper corner of the character on canvas</param>
        /// <param name="width">'pixel'-width</param>
        /// <param name="height">'pixel'-height</param>
        public void Draw(Brush brush, Graphics g, Point pt, int width, int height)
        {
            int pX = pt.X;
            int pY = pt.Y;

            for (int b = 15; b >= 0; --b)
            {

                for (int bit = 7; bit >= 0; --bit)
                {
                    if (CharBytes[b].HasBit(bit))  // Draw point if bit is set
                    {
                        g.FillRectangle(brush, new Rectangle(pX, pY, width, height));
                    }

                    // move to next bit/column
                    pX += width;
                }
                pX = pt.X;
                // move to next row
                pY += height;
            }
        }
    }

    internal static class extensions
    {

        public static bool HasBit(this Byte b, int bit) { return (b & (1 << bit)) != 0; }

        public static Byte SetBit(this Byte b, int bit) { return (byte)(b | (byte)(0x01 << bit)); }

        public static Byte RemoveBit(this Byte b, int bit) { return (byte)(b & ~(byte)(0x01 << bit)); }


        /// <summary>
        /// Serialize a object to a byte array (binary serialization)
        /// </summary>
        /// <param name=""></param>
        /// <param name=""></param>
        /// <returns></returns>
        public static byte[] ToByteArray(this object obj)
        {
            MemoryStream stream = null;
            byte[] ret = null;

            try
            {
                BinaryFormatter formatter = new BinaryFormatter();
                stream = new MemoryStream();
                formatter.Serialize(stream, obj);
                ret = stream.ToArray();
                stream.Flush();
            }
            catch
            {
                throw;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            return ret;
        }

        public static T FromByteArray<T>(byte[] data)
        {
            T ret = default(T);
            MemoryStream stream = null;

            try
            {
                stream = new MemoryStream(data);
                BinaryFormatter formatter = new BinaryFormatter();
                ret = (T)formatter.Deserialize(stream);
                stream.Flush();
            }
            catch
            {
                throw;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            return ret;
        }
    }
}
